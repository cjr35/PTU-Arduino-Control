/*
 * Written by C. Jacob Rich and Evan Holzschuh
 * 
 * Controls an FLIR PTU-D300E remotely with an Arduino Mega microcontroller
 * Allows the user to easily run pre-programmed scripts instead of individual commands on the PTU
 * 
 * Version History
 * none yet
 */

#include <string.h>

boolean go = false; // flag to stop execution of a script if an error is encountered
boolean exe = false; // flag to ignore user commands while the Arduino is sending commands to the PTU
boolean err = false; // flag to catch errors
int count = 0; // count the number of PTU commands that have been sent
String uCommand = ""; // a string to store user-entered commands

void setup() {

  Serial.begin(9600); // establish serial connection between user and Arduino Mega
  Serial1.begin(9600); // establish serial connection between Arduino Mega and FLIR PTU-D300E
  
}

void loop() {

  if (!exe) { // allow user action only if the Arduino is not currently running a script
  
    uCommand = Serial.readString(); // recieve command from user end
    uCommand.toUpperCase();

    if (uCommand.equals("RUN")) {
      exe = true;
      getNextPTUCommand(count, "ONE OF THE SCRIPTS");
      // keep track of count
      // stop and reset if gNC returns END
      // loop depending on value of go
    }
  }
}

void serialEvent() { 

  while(Serial1.available()) {
    String err = Serial1.readString(); // receive string returned by the PTU after each command
    if (err.indexOf('!') == -1) {
      go = true; // if there is no error, allow the script to continue
    }
    else {
      Serial.println("PTU has encountered an error: " + err); // if there is an error, report it and halt the script
      go = false;
      // send command to reset PTU or whatever
    }
  }
}

String getNextPTUCommand(int skip, String script) { // skips a number of commands and returns the next one in a script

  const String delims = "\n"; // a string containing all allowed delimiters
  char inChar = script.charAt(0); // used to check each char in the script (see below)
  String nextCommand = ""; // string to return
  
  if (script.length() == 0) { // check that script is not null
    return "ERR_NULL"; // stop execution and report error
  }
  
  while (skip > 0) { // the required number of commands have not been skipped
    if (delims.indexOf(inChar) >= 0) { // the end of a command has been found
      skip--;
    }
    script = script.substring(1); // the first char is removed so that charAt(0) gets the next one
    if (script.length() == 0) { // end of the script has been reached prematurely
      return "ERR_END"; // stop exectution and report error
    }
    inChar = script.charAt(0);
  } // after the loop, the first command in the remainder of the script is the one that should be sent
  
  while (delims.indexOf(inChar) < 0) { // loop through the script and record each char until a delimiter is found
    nextCommand += inChar;
    script = script.substring(1);
    inChar = script.charAt(0);
  }
  
  go = false; // stop the script temporarily to wait for the PTU's response
  return nextCommand;
}
