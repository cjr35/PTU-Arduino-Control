/*
 * Written by C. Jacob Rich and Evan Holzschuh
 * 
 * Controls an FLIR PTU-D300E remotely with an Arduino Mega microcontroller
 * Allows the user to easily run pre-programmed scripts instead of individual commands on the PTU
 * 
 * Version History
 * none yet
 */

#include <string.h>

boolean go = false; // flag to stop execution of a script if an error is encountered
boolean exe = false; // flag to ignore user commands while the Arduino is sending commands to the PTU
int count = 0; // count the number of PTU commands that have been sent
String uCommand = ""; // a string to store user-entered commands

void setup() {
Serial.begin(9600); // establish serial connection between user and Arduino Mega
Serial1.begin(9600); // establish serial connection between Arduino Mega and FLIR PTU-D300E
}

void loop() {
  if (!exe) {
    uCommand = Serial.readString(); // recieve command from user end
    uCommand.toUpperCase(); // so that the program is not case-sensitive

    if (uCommand.equals("RUN")) {
      exe = true;
      getNextPTUCommand(count, "ONE OF THE SCRIPTS");
      // keep track of count
      // stop and reset if gNC returns END
      // loop depending on value of go
    }
  }
}

void serialEvent() { 
  while(Serial1.available()){
    String err = Serial1.readString(); // receive string returned by the PTU after each command
    if (err.indexOf('!') == -1) {
      go = true; // if there is no error, allow the script to continue
    }
    else {
      Serial.println("PTU has encountered an error: " + err); // if there is an error, report it and halt the script
      // send command to reset PTU or whatever
    }
  }
}

void getNextPTUCommand(int skip, String script) { // skips a number of commands and returns the next one in a script
  String outStr = ""; // string to return 
  char inChar = script.charAt(0); // check each char in the script to see if it is a delimiter (currently only using '\n')
  while (skip > 0) { // the required number of commands have not been skipped
    if (inChar == '\n') { // the end of a command has been found
      skip--;
    }
    script = script.substring(1); // the first char is removed so that charAt(0) gets the next one
    inChar = script.charAt(0);
  } // after the loop, the first command in the remainder of the script is the one that should be sent
  while (inChar != '\n') { // loop through the script and record each char until the delimiter is found
    outStr += inChar;
    script = script.substring(2);
    inChar = script.charAt(0);
  }
  go = false; // stop the script temporarily to wait for the PTU's response
  return outStr;
}
